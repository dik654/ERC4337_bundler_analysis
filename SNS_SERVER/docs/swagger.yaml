basePath: /v1
definitions:
  dto.CreateCommentRequest:
    properties:
      content:
        type: string
      id:
        type: string
    type: object
  dto.CreatePostRequest:
    properties:
      content:
        type: string
      title:
        type: string
    type: object
  dto.GetCommentRequest:
    properties:
      body:
        type: string
      type:
        type: integer
    type: object
  dto.GetPostRequest:
    properties:
      body:
        type: string
      type:
        type: integer
    type: object
  dto.PaginationRequest:
    properties:
      page_num:
        type: integer
      page_size:
        type: integer
    type: object
  dto.PostLikeRequest:
    properties:
      id:
        type: string
      like:
        type: boolean
    type: object
  dto.SignInRequest:
    properties:
      id:
        type: string
      password:
        type: string
    type: object
  models.Address:
    properties:
      city:
        type: string
      pincode:
        type: integer
      state:
        type: string
    type: object
  models.Comment:
    properties:
      author_id:
        type: string
      content:
        type: string
      created_at:
        type: string
      id:
        type: string
      post_id:
        type: string
      updated_at:
        type: string
    type: object
  models.Judge:
    properties:
      body:
        type: string
      id:
        type: string
      type:
        type: integer
    type: object
  models.User:
    properties:
      address:
        $ref: '#/definitions/models.Address'
      age:
        type: integer
      email:
        type: string
      id:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
host: localhost:9090
info:
  contact: {}
  description: mini sns server
  termsOfService: http://swagger.io/terms/
  title: SNS SERVER
  version: "1.0"
paths:
  /comment/create:
    post:
      consumes:
      - application/json
      description: |-
        write the comment to mongodb
        id string | post id for comment
        content string | comment content
      parameters:
      - description: Comment Data
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/dto.CreateCommentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: write the comment
      tags:
      - CRUD comment
  /comment/delete/{comment_id}:
    delete:
      consumes:
      - application/json
      description: comment owner delete the comment from DB
      parameters:
      - description: comment_id
        in: path
        name: comment_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: delete the comment
      tags:
      - CRUD comment
  /comment/get/:
    post:
      consumes:
      - application/json
      description: |-
        get post comments to mongodb
        type = 1, 2 | search comments type 1: post id, type 2: comment author
        body sring | Check whether the search body is included in the type search results
      parameters:
      - description: post id
        in: body
        name: id
        required: true
        schema:
          $ref: '#/definitions/dto.GetCommentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Comment'
            type: array
      summary: get post comments
      tags:
      - CRUD comment
  /comment/update:
    patch:
      consumes:
      - application/json
      description: comment owner update regular user informations to mongodb
      parameters:
      - description: Comment update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateCommentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: update regular user data
      tags:
      - CRUD comment
  /login/glogin:
    get:
      consumes:
      - application/json
      description: sign out google user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Set-Cookie:
              description: Session Cookie
              type: string
          schema:
            type: string
      summary: sign up google user
      tags:
      - sign in/out google user
  /login/glogout:
    get:
      consumes:
      - application/json
      description: sign out google user
      parameters:
      - description: Session Cookie
        in: header
        name: google_user_session
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: sign out google user
      tags:
      - sign in/out google user
  /login/signin:
    post:
      consumes:
      - application/json
      description: sign in regular user
      parameters:
      - description: regular login data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.SignInRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Set-Cookie:
              description: Session Cookie
              type: string
          schema:
            type: string
      summary: sign in regular user
      tags:
      - sign in/out regular user
  /login/signout:
    post:
      consumes:
      - application/json
      description: sign out regular user
      parameters:
      - description: Session Cookie
        in: header
        name: regular_user_session
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: sign out regular user
      tags:
      - sign in/out regular user
  /post/create:
    post:
      consumes:
      - application/json
      description: write post data to mongodb
      parameters:
      - description: Post request
        in: body
        name: post_request
        required: true
        schema:
          $ref: '#/definitions/dto.CreatePostRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: upload the post
      tags:
      - CRUD post
  /post/delete/{post_id}:
    delete:
      consumes:
      - application/json
      description: |-
        delete the post from DB
        parameter post_id | specific post id
      parameters:
      - description: post_id
        in: path
        name: post_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: delete the post
      tags:
      - CRUD post
  /post/get:
    post:
      consumes:
      - application/json
      description: |-
        get posts from DB
        type = 1, 2, 3 | search posts type 1: title, type 2: content, type 3: author
        body = string | Check whether the search body is included in the type search results
      parameters:
      - description: Post request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.GetPostRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: get posts
      tags:
      - CRUD post
  /post/getall:
    post:
      consumes:
      - application/json
      description: |-
        get all posts by pagination
        page_num int64 | page number
        page_size int64 | number of post in page
      parameters:
      - description: Page request
        in: body
        name: page_request
        required: true
        schema:
          $ref: '#/definitions/dto.PaginationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: get all posts
      tags:
      - CRUD post
  /post/judge:
    post:
      consumes:
      - application/json
      description: "write report of the post to DB\ntype uint8 | type 1: insult, type
        2: sexual, type 3: violent\nid\tstring | specific violated post id\nbody string
        | details of violation"
      parameters:
      - description: Judge request
        in: body
        name: judge_request
        required: true
        schema:
          $ref: '#/definitions/models.Judge'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: report the post
      tags:
      - CRUD post
  /post/like:
    post:
      consumes:
      - application/json
      description: |-
        write user informations to mongodb
        id string | specific post id
        like bool | true: like it, false: unlike it
      parameters:
      - description: Like request
        in: body
        name: like_request
        required: true
        schema:
          $ref: '#/definitions/dto.PostLikeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: sign up regular user
      tags:
      - CRUD post
  /post/update/{post_id}:
    patch:
      consumes:
      - application/json
      description: |-
        post owner update the post
        parameter post_id | specific post id
        title string | title you want to change
        content string | content you want to change
      parameters:
      - description: Update data
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/dto.CreatePostRequest'
      - description: post_id
        in: path
        name: post_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: update the post
      tags:
      - CRUD post
  /register/create:
    post:
      consumes:
      - application/json
      description: write user informations to mongodb
      parameters:
      - description: User Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: sign up regular user
      tags:
      - CRUD user
  /register/delete/{id}:
    delete:
      consumes:
      - application/json
      description: delete user information in mongodb
      parameters:
      - description: regular_user_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: delete regular user data
      tags:
      - CRUD user
  /register/get/{id}:
    get:
      consumes:
      - application/json
      description: get regular user informations to mongodb
      parameters:
      - description: regular_user_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: get user data
      tags:
      - CRUD user
  /register/getall:
    get:
      consumes:
      - application/json
      description: get all regular user informations to mongodb
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      summary: get user data
      tags:
      - CRUD user
  /register/update:
    patch:
      consumes:
      - application/json
      description: update regular user informations to mongodb
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: update regular user data
      tags:
      - CRUD user
swagger: "2.0"
